# bot.py
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from core.downloader import search_youtube, download_song
from core.spotify import get_track_info_from_spotify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(name)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise EnvironmentError("TELEGRAM_BOT_TOKEN not set")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üéµ EchoirBot ‚Äî –≤–∞—à –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *Bohemian Rhapsody*)\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ YouTube\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Spotify\n\n"
        "–Ø –Ω–∞–π–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∫–∞–∫ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å ‚Äî —Å–ª—É—à–∞–π—Ç–µ –ø—Ä—è–º–æ –≤ Telegram!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.message.text.strip()
    if len(query) < 2:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Spotify-—Å—Å—ã–ª–æ–∫
    if "spotify.com" in query:
        await update.message.reply_text("üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Spotify-—Å—Å—ã–ª–∫—É...")
        search_query = get_track_info_from_spotify(query)
        if not search_query:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Spotify. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
            search_query = query
    else:
        search_query = query

    await update.message.reply_text("üîç –ò—â—É –Ω–∞ YouTube...")
    results = search_youtube(search_query, max_results=5)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not results:
        await update.message.reply_text(
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Spotify-—Å—Å—ã–ª–∫—É\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    context.user_data['results'] = results

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard = [
        [InlineKeyboardButton(f"üéß {track['title'][:40]}...", callback_data=f"track_{i}")]
        for i, track in enumerate(results)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=reply_markup)

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞"""
    query = update.callback_query
    await query.answer()

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ callback_data
        idx = int(query.data.split("_")[1])
        results = context.user_data.get('results', [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
        if not results or idx >= len(results):
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return

        track = results[idx]
        await query.edit_message_text(f"üéß –°–∫–∞—á–∏–≤–∞—é: {track['title']}...")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        result = download_song(track['url'])
        if not result:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π).")
            return

        file_path = result['file_path']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (Telegram –ª–∏–º–∏—Ç 50 –ú–ë)
        file_size = os.path.getsize(file_path)
        if file_size > 50 * 1024 * 1024:
            await query.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50 –ú–ë). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.")
            os.remove(file_path)
            return
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        with open(file_path, 'rb') as audio:
            await query.message.reply_audio(
                audio=audio,
                title=result['title'],
                performer=result['artist'],
                duration=result['duration']
            )

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(file_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        await query.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            f"‚Ä¢ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞"
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    
    try:
        application = Application.builder().token(TOKEN).build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(handle_download))

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if name == "main":
    main()
