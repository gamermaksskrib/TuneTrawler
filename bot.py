# bot.py
import os
import logging
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import yt_dlp
from core.spotify import get_track_info_from_spotify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DOWNLOADS_DIR = "downloads"
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB (–ª–∏–º–∏—Ç Telegram)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.critical("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise EnvironmentError("TELEGRAM_BOT_TOKEN not set")

def get_yt_dlp_version():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ yt-dlp"""
    try:
        return yt_dlp.version.__version__
    except (ImportError, AttributeError):
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üéµ **EchoirBot** ‚Äî –≤–∞—à –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *Bohemian Rhapsody*)\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ YouTube\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Spotify\n\n"
        "–Ø –Ω–∞–π–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∫–∞–∫ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å ‚Äî —Å–ª—É—à–∞–π—Ç–µ –ø—Ä—è–º–æ –≤ Telegram!\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ MP3 320kbps (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ FLAC (Lossless)\n"
        "‚Ä¢ AAC 320kbps\n\n"
        "‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–æ—Å—Å–∏—è) –≤–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n"
        "–†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    )
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
    if len(query) < 2:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{query}'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Spotify-—Å—Å—ã–ª–æ–∫
    if "spotify.com" in query:
        await update.message.reply_text("üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Spotify-—Å—Å—ã–ª–∫—É...")
        search_query = get_track_info_from_spotify(query)
        if not search_query:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Spotify.\n"
                "–ü–æ–ø—Ä–æ–±—É—é –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
            )
            search_query = query
    else:
        search_query = query

    await update.message.reply_text("üîç –ò—â—É –Ω–∞ YouTube...")
    
    # –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
    try:
        from core.downloader import search_youtube
        results = search_youtube(search_query, max_results=5)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–∑—ã–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not results:
        await update.message.reply_text(
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Spotify-—Å—Å—ã–ª–∫—É\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    context.user_data['results'] = results

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard = [
        [InlineKeyboardButton(f"üéß {track['title'][:40]}...", callback_data=f"track_{i}")]
        for i, track in enumerate(results)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=reply_markup)

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞"""
    query = update.callback_query
    await query.answer()

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ callback_data
        idx = int(query.data.split("_")[1])
        results = context.user_data.get('results', [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
        if not results or idx >= len(results):
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return

        track = results[idx]
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ç—Ä–µ–∫: {track['title']}")
        await query.edit_message_text(f"üéß –°–∫–∞—á–∏–≤–∞—é: {track['title']}...")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        try:
            from core.downloader import download_song
            result = download_song(track['url'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫."
            )
            return

        if not result:
            await query.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            )
            return

        file_path = result['file_path']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (Telegram –ª–∏–º–∏—Ç 50 –ú–ë)
        file_size = os.path.getsize(file_path)
        if file_size > MAX_FILE_SIZE:
            os.remove(file_path)
            await query.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50 –ú–ë).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        try:
            with open(file_path, 'rb') as audio:
                await query.message.reply_audio(
                    audio=audio,
                    title=result['title'][:64],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
                    performer=result['artist'][:64],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    duration=min(result['duration'], 2147483),  # –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ Telegram
                )
            logger.info(f"–¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result['title']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            os.remove(file_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

    except (IndexError, ValueError) as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
        await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    except Exception as e:
        logger.exception(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs(DOWNLOADS_DIR, exist_ok=True)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("========================================")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Echoir Telegram Bot")
    logger.info(f"–í–µ—Ä—Å–∏—è python-telegram-bot: {telegram.__version__}")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤!)
    token_preview = f"{TOKEN[:4]}...{TOKEN[-4:]}"
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {token_preview}")
    
    logger.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: {os.path.abspath(DOWNLOADS_DIR)}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ yt-dlp
    yt_dlp_version = get_yt_dlp_version()
    logger.info(f"yt-dlp –≤–µ—Ä—Å–∏—è: {yt_dlp_version}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
    try:
        import subprocess
        ffmpeg_version = subprocess.check_output(['ffmpeg', '-version'], stderr=subprocess.STDOUT, text=True)
        ffmpeg_version = ffmpeg_version.split('\n')[0]
        logger.info(f"FFmpeg –≤–µ—Ä—Å–∏—è: {ffmpeg_version}")
    except Exception as e:
        logger.warning(f"FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    
    logger.info("========================================")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TOKEN).build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(handle_download))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
