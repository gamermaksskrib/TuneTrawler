# bot.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask
import threading
import os

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from core.downloader import search_youtube, download_song
from core.spotify import get_track_info_from_spotify

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DOWNLOADS_DIR = "downloads"
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

if not TOKEN:
    raise EnvironmentError("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–¥–ª—è Render)
flask_app = Flask(name)

@flask_app.route('/')
def home():
    return "<h1>Echoir Telegram Bot is running! üéµ</h1>"

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéµ EchoirBot ‚Äî –≤–∞—à –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *Bohemian Rhapsody*)\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ YouTube\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Spotify\n\n"
        "–Ø –Ω–∞–π–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∫–∞–∫ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å ‚Äî —Å–ª—É—à–∞–π—Ç–µ –ø—Ä—è–º–æ –≤ Telegram!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if len(query) < 2:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Spotify
    if "spotify.com" in query:
        await update.message.reply_text("üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Spotify-—Å—Å—ã–ª–∫—É...")
        search_query = get_track_info_from_spotify(query)
        if not search_query:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Spotify. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
            search_query = query
    else:
        search_query = query

    await update.message.reply_text("üîç –ò—â—É –Ω–∞ YouTube...")
    results = search_youtube(search_query, max_results=5)

    if not results:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    context.user_data['results'] = results

    keyboard = [
        [InlineKeyboardButton(f"üéß {track['title'][:40]}...", callback_data=f"track_{i}")]
        for i, track in enumerate(results)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=reply_markup)

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        idx = int(query.data.split("_")[1])
        results = context.user_data.get('results', [])
        if idx >= len(results):
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            return

        track = results[idx]
        await query.edit_message_text(f"üéß –°–∫–∞—á–∏–≤–∞—é: {track['title']}...")

        result = download_song(track['url'], DOWNLOADS_DIR)
        if not result:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π).")
            return

        file_path = result['file_path']
        if not os.path.exists(file_path):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        with open(file_path, 'rb') as audio:
            await query.message.reply_audio(
                audio=audio,
                title=result['title'],
                performer=result['artist'],
                duration=result['duration']
            )

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(file_path)

    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ ===
def run_bot():
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    try:
        application = Application.builder().token(TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(handle_download))
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

# === –ó–∞–ø—É—Å–∫ Flask + Bot ===
if name == "main":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_bot, daemon=True).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç Render
    port = int(os.environ.get("PORT", 10000))
    flask_app.run(host="0.0.0.0", port=port)
